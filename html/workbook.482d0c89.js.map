{"mappings":"khBAsHA,IACEA,QAAQC,IAAI,0BACZC,MACAF,QAAQC,IAAI,yB,CACZ,MAAOE,GACPH,QAAQI,IAAID,EAAME,MAClBL,QAAQI,IAAID,EAAMG,OAClBN,QAAQC,IAAI,Q,CAEdD,QAAQC,IAAI,oB","sources":["src/js/workbook.js"],"sourcesContent":["// Change this number to fetch different post\n// const postId = 1;\n\n// fetch(`https://jsonplaceholder.typicode.com/posts/${postId}`)\n//   .then(response => response.json())\n//   .then(post => console.log(post))\n//   .catch(error => console.log(error));\n\n// const postToAdd = {\n//   author: 'Mango',\n//   body: 'CRUD is awesome',\n// };\n\n// const options = {\n//   method: 'POST',\n//   body: JSON.stringify(postToAdd),\n//   headers: {\n//     'Content-Type': 'application/json; charset=UTF-8',\n//   },\n// };\n\n// fetch('https://jsonplaceholder.typicode.com/posts', options)\n//   .then(response => response.json())\n//   .then(post => console.log(post))\n//   .catch(error => console.log(error));\n\n// Change value of id property to update different post\n// const postToUpdate = {\n//   id: 1,\n//   body: 'CRUD is really awesome',\n// };\n\n// const options = {\n//   method: 'PATCH',\n//   body: JSON.stringify(postToUpdate),\n//   headers: {\n//     'Content-Type': 'application/json; charset=UTF-8',\n//   },\n// };\n\n// fetch(`https://jsonplaceholder.typicode.com/posts/${postToUpdate.id}`, options)\n//   .then(response => response.json())\n//   .then(post => console.log(post))\n//   .catch(error => console.log('ERROR' + error));\n\n// const postIdToDelete = 1;\n\n// fetch(`https://jsonplaceholder.typicode.com/posts/${postIdToDelete}`, {\n//   method: 'DELETE',\n// })\n//   .then(() => console.log('Post deleted'))\n//   .catch(error => console.log('Error:', error));\n\n//\n// const fetchFriends = async () => {\n//   const token = await fetch('my-api.com/me');\n//   const user = await fetch(`my-api.com/profile?token=${token}`);\n//   const friends = await fetch(`my-api.com/users/${user.id}/friends`);\n//   return friends;\n// };\n\n// fetchFriends()\n//   .then(friends => console.log(friends))\n//   .catch(error => console.error(error));\n\n//\n// const fetchUsers = async () => {\n//   const baseUrl = 'https://jsonplaceholder.typicode.com';\n//   const firstResponse = await fetch(`${baseUrl}/users/1`);\n//   const secondResponse = await fetch(`${baseUrl}/users/2`);\n//   const thirdResponse = await fetch(`${baseUrl}/users/3`);\n\n//   const firstUser = await firstResponse.json();\n//   const secondUser = await secondResponse.json();\n//   const thirdUser = await thirdResponse.json();\n\n//   console.log(firstUser, secondUser, thirdUser);\n// };\n\n// fetchUsers();\n\n//\n// const fetchUsers = async () => {\n//   const baseUrl = 'https://jsonplaceholder.typicode.com';\n//   const userIds = [1, 2, 3];\n\n//   // 1. Создаём массив промисов\n//   const arrayOfPromises = userIds.map(async userId => {\n//     const response = await fetch(`${baseUrl}/users/${userId}`);\n//     return response.json();\n//   });\n\n//   // 2. Запускаем все промисы параллельно и ждем их завершения\n//   const users = await Promise.all(arrayOfPromises);\n//   console.log(users);\n// };\n\n// fetchUsers();\n\n//\n// console.log('Hello World!');\n// const a = 5;\n\n// try {\n//   console.log('Inside try befor myVar');\n// setTimeout(() => {\n//   try {\n//     myVar;\n//   } catch (error) {\n//     console.log('Error');\n//   }\n// }, 1000);\n\n//   console.log('Inside try after myVar');\n// } catch (error) {\n//   console.log('Error');\n// }\n\ntry {\n  console.log('Inside try befor myVar');\n  myVar;\n  console.log('Inside try after myVar');\n} catch (error) {\n  console.dir(error.name);\n  console.dir(error.stack);\n  console.log('Error');\n}\nconsole.log('After try...catch');\n"],"names":["console","log","myVar","error","dir","name","stack"],"version":3,"file":"workbook.482d0c89.js.map"}